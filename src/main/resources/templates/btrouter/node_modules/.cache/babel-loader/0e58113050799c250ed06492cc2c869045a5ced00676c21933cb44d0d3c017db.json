{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\Java\\\\BTRouter\\\\src\\\\main\\\\resources\\\\templates\\\\btrouter\\\\src\\\\components\\\\Auth\\\\ProtectedRoute.jsx\";\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  // Check if JWT token exists in localStorage\n  const token = localStorage.getItem('token');\n\n  // Redirect to login if no token found\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n  try {\n    // Decode and verify JWT token expiration\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }, this);\n    }\n  } catch (error) {\n    // Handle invalid token by removing it and redirecting\n    localStorage.removeItem('token');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If token is valid, render the protected component\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","token","localStorage","getItem","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","payload","JSON","parse","atob","split","exp","Date","now","removeItem","error","_c","$RefreshReg$"],"sources":["D:/Code/Java/BTRouter/src/main/resources/templates/btrouter/src/components/Auth/ProtectedRoute.jsx"],"sourcesContent":["import { Navigate } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    // Check if JWT token exists in localStorage\r\n    const token = localStorage.getItem('token');\r\n\r\n    // Redirect to login if no token found\r\n    if (!token) {\r\n        return <Navigate to=\"/login\" replace />;\r\n    }\r\n\r\n    try {\r\n        // Decode and verify JWT token expiration\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        if (payload.exp < Date.now() / 1000) {\r\n            localStorage.removeItem('token');\r\n            return <Navigate to=\"/login\" replace />;\r\n        }\r\n    } catch (error) {\r\n        // Handle invalid token by removing it and redirecting\r\n        localStorage.removeItem('token');\r\n        return <Navigate to=\"/login\" replace />;\r\n    }\r\n\r\n    // If token is valid, render the protected component\r\n    return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACrC;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAI,CAACF,KAAK,EAAE;IACR,oBAAOH,OAAA,CAACF,QAAQ;MAACQ,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3C;EAEA,IAAI;IACA;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,IAAIJ,OAAO,CAACK,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;MACjCf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;MAChC,oBAAOpB,OAAA,CAACF,QAAQ;QAACQ,EAAE,EAAC,QAAQ;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC3C;EACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZ;IACAjB,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChC,oBAAOpB,OAAA,CAACF,QAAQ;MAACQ,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3C;;EAEA;EACA,OAAOT,QAAQ;AACnB,CAAC;AAACoB,EAAA,GAxBIrB,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}